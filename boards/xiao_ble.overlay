&pinctrl {
	pwm1_default: pwm1_default {
		group1 {
			psels = <NRF_PIN_DISCONNECTED>;
		};
	};

	pwm1_sleep: pwm1_sleep {
		group1 {
			psels = <NRF_PIN_DISCONNECTED>;
			low-power-enable;
		};
	};
};

&i2c0_default {
	group1 {
		bias-disable;
	};
};

&i2c0_sleep {
	group1 {
		bias-disable;
	};
};

&i2c1_default {
	group1 {
		bias-disable;
	};
};

&i2c1_sleep {
	group1 {
		bias-disable;
	};
};

&pwm0_default {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 0, 26)>,
			<NRF_PSEL(PWM_OUT1, 0, 30)>,
			<NRF_PSEL(PWM_OUT2, 0, 6)>;
		nordic,drive-mode = <NRF_DRIVE_D0S1>;
		nordic,invert;
	};
};

&pwm0_sleep {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 0, 26)>,
			<NRF_PSEL(PWM_OUT1, 0, 30)>,
			<NRF_PSEL(PWM_OUT2, 0, 6)>;
	};
};

/ {
	pwmleds {
		pwm_led0: pwm_led_0 {
			pwms = <&pwm0 0 PWM_MSEC(1) PWM_POLARITY_INVERTED>;
		};
		pwm_led1: pwm_led_1 {
			pwms = <&pwm0 1 PWM_MSEC(1) PWM_POLARITY_INVERTED>;
		};
		pwm_led2: pwm_led_2 {
			pwms = <&pwm0 2 PWM_MSEC(1) PWM_POLARITY_INVERTED>;
		};
	};

	buttons {
		compatible = "gpio-keys";
		button0: button_0 {
			gpios = <&gpio0 2 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button switch 0";
		};
	};

	aliases {
		// sw0 = &button0; // Uncomment to Enable SW0
		pwm-led1 = &pwm_led1;
		pwm-led2 = &pwm_led2;
	};

	pwmclock: pwmclock {
		compatible = "pwm-clock";
		#clock-cells = <1>;
		pwms = <&pwm1 0 PWM_HZ(32768) PWM_POLARITY_NORMAL>;
	};

	battery-divider {
        compatible = "voltage-divider";
        status = "okay";
        io-channels = <&adc 7>;
        output-ohms = <510000>;
        full-ohms = <(1000000+510000)>;
        power-gpios = <&gpio0 14 (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)>;
	};

	zephyr,user {
		int0-gpios = <&gpio0 3 0>;
		led-gpios = <&gpio0 17 (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)>;
		// clk-gpios = <&gpio0 28 GPIO_OPEN_DRAIN>; // Uncomment and set to correct pin if using an external clock (crystal oscillator)
	};

};

&i2c1 {
	compatible = "nordic,nrf-twim";
	zephyr,concat-buf-size = <1023>;
	zephyr,flash-buf-max-size = <1023>;
	clock-frequency = <I2C_BITRATE_FAST>;

	imu: imu@0 { // any address out of range (00, 7f, etc. will search all addresses and stored address first if available, specify an address here to search first otherwise
		compatible = "i2c-device";
		label = "imu";
		reg = <0>;
	};

	mag: mag@0 {
		compatible = "i2c-device";
		label = "mag";
		reg = <0>;
	};

};

&pwm1 {
	status = "okay";
	pinctrl-0 = <&pwm1_default>;
	pinctrl-1 = <&pwm1_sleep>;
	pinctrl-names = "default", "sleep";
};

&cryptocell {
	status = "disabled";
};

&nfct {
	status = "disabled";
};
